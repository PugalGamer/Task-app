[{"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\index.js":"1","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\App.js":"2","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\ViewPage.js":"3","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\BoardView.js":"4","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\ListView.js":"5","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\CalendarView.js":"6","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\CalendarTaskRow.js":"7","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\Dashboard.js":"8","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\Calendar.js":"9","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\TaskListRow.js":"10","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\BoardBox.js":"11","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\TaskForm.js":"12","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\SearchNav.js":"13","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\CalendarBox.js":"14","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\Notification.js":"15","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Log\\Login.js":"16","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Log\\Register.js":"17","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Route\\AppRoutes.js":"18","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Dash\\Dash2.js":"19","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\front\\Portfolio.js":"20","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Admin\\Admin.js":"21"},{"size":448,"mtime":1703341814765,"results":"22","hashOfConfig":"23"},{"size":1345,"mtime":1708707307800,"results":"24","hashOfConfig":"23"},{"size":1478,"mtime":1703518232329,"results":"25","hashOfConfig":"23"},{"size":1852,"mtime":1710681238414,"results":"26","hashOfConfig":"23"},{"size":4059,"mtime":1706958796758,"results":"27","hashOfConfig":"23"},{"size":1307,"mtime":1703490577717,"results":"28","hashOfConfig":"23"},{"size":1043,"mtime":1703341815215,"results":"29","hashOfConfig":"23"},{"size":4401,"mtime":1708608855981,"results":"30","hashOfConfig":"23"},{"size":3190,"mtime":1703489894074,"results":"31","hashOfConfig":"23"},{"size":5934,"mtime":1703341815804,"results":"32","hashOfConfig":"23"},{"size":4231,"mtime":1703341814859,"results":"33","hashOfConfig":"23"},{"size":6671,"mtime":1708608437599,"results":"34","hashOfConfig":"23"},{"size":711,"mtime":1703346354065,"results":"35","hashOfConfig":"23"},{"size":3206,"mtime":1703490584671,"results":"36","hashOfConfig":"23"},{"size":1054,"mtime":1703341815555,"results":"37","hashOfConfig":"23"},{"size":2089,"mtime":1710681553482,"results":"38","hashOfConfig":"23"},{"size":1655,"mtime":1708608751765,"results":"39","hashOfConfig":"23"},{"size":1020,"mtime":1703488435746,"results":"40","hashOfConfig":"41"},{"size":8436,"mtime":1710681241890,"results":"42","hashOfConfig":"23"},{"size":3214,"mtime":1708699774318,"results":"43","hashOfConfig":"23"},{"size":9487,"mtime":1710681245091,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"11tkk55",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"48"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gvwyvl",{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\index.js",[],[],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\App.js",[],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\ViewPage.js",["121","122"],[],"import \"./ViewPage.css\";\nimport Dashboard from \"./Dashboard\";\nimport SearchNav from \"./SearchNav\";\n// import ListView from \"./ListView\";\nimport TaskForm from \"./TaskForm\";\nimport { createContext, useEffect, useRef, useState } from \"react\";\n\nexport const NotificationContext = createContext();\nexport default function Main({ view, index }) {\n  const [notification, setNotification] = useState();\n  const taskForm = useRef(null);\n  const [listView, setlistView] = useState(view);\n  const [reRendertasks, setreRendertasks] = useState(false);\n  const [dashboard, setDashbaord] = useState(\n    <Dashboard key={index} index={index} />\n  );\n  const toggleForm = () => {\n    taskForm.current.style.display = \"flex\";\n  };\n  useEffect(() => {\n    setlistView((current) => [current]);\n  }, [reRendertasks]);\n  useEffect(() => {\n    setlistView(view);\n    setDashbaord([<Dashboard key={index} index={index} />]);\n  }, [view]);\n  return (\n    <NotificationContext.Provider value={setNotification}>\n      <div id=\"Main\">\n        {dashboard}\n        <div className=\"main_container\">\n          {/* <SearchNav/> */}\n          <button id=\"add_task\" onClick={toggleForm}>\n            <i className=\"fa-solid fa-plus\"></i>\n          </button>\n          {listView}\n          <TaskForm ref={taskForm} reRendertasks={setreRendertasks} />\n        </div>\n        <div className=\"notif_container\">\n          <div>{notification}</div>\n        </div>\n      </div>\n    </NotificationContext.Provider>\n  );\n}\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\BoardView.js",["123"],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\ListView.js",["124","125","126"],[],"import \"./ListView.css\";\nimport axios from \"axios\";\nimport { useEffect, useState, createContext } from \"react\";\nimport TaskListRow from \"./TaskListRow\";\nexport const TasksContext = createContext();\nexport function dragAndDrop(doms) {\n  if (doms instanceof NodeList) {\n    doms.forEach((dom) => {\n      dom.addEventListener(\"dragover\", (container) => {\n        container.preventDefault();\n        const draggedElement = document.querySelector(\".dragging\");\n        if (\n          draggedElement.parentElement.parentElement.id != dom.parentElement.id\n        )\n          draggedElement.id = \"changeMe\";\n      });\n      dom.addEventListener(\"dragleave\", (container) => {\n        container.preventDefault();\n        const draggedElement = document.querySelector(\".dragging\");\n        draggedElement.id = \"\";\n      });\n    });\n  } else {\n    doms.addEventListener(\"dragover\", (container) => {\n      container.preventDefault();\n      const draggedElement = document.querySelector(\".dragging\");\n      if (draggedElement.parentElement.id != doms.id)\n        draggedElement.id = \"changeMe\";\n    });\n\n    doms.addEventListener(\"dragleave\", (container) => {\n      container.preventDefault();\n      const draggedElement = document.querySelector(\".dragging\");\n      draggedElement.id = \"\";\n    });\n  }\n}\n\nexport default function ListView() {\n  let userloginname = localStorage.getItem(\"username\");\n  //   console.log(userloginname);\n  const [updateTasks, setupdateTasks] = useState(false);\n  const [uncompletedTasks, setuncompletedTasks] = useState();\n  const [completedTasks, setcompletedTasks] = useState();\n\n  const getTasks = async () => {\n    const { data } = await axios.get(\n      `http://localhost:3002/api/tasks?username=${userloginname}`\n    );\n    console.log(data.data);\n    if (data.success === true && data.data.length > 0) {\n      console.log(data.data);\n      const uncompleted = data.data\n        .filter((e) => e.completed === false)\n        .map((e, i) => {\n          return <TaskListRow key={i} {...e} />;\n        });\n      if (uncompleted.length > 0) {\n        setuncompletedTasks([...uncompleted]);\n      } else {\n        setuncompletedTasks(\n          <tr className=\"empty_list\">\n            <td>List is empty</td>\n          </tr>\n        );\n      }\n      const completed = data.data\n        .filter((e) => e.completed === true)\n        .map((e, i) => {\n          return <TaskListRow key={i} {...e} />;\n        });\n      if (completed.length > 0) {\n        setcompletedTasks([...completed]);\n      } else {\n        setcompletedTasks(\n          <tr className=\"empty_list\">\n            <td>List is empty</td>\n          </tr>\n        );\n      }\n    } else {\n      setuncompletedTasks(\n        <tr className=\"empty_list\">\n          <td>List is empty</td>\n        </tr>\n      );\n      setcompletedTasks(\n        <tr className=\"empty_list\">\n          <td>List is empty</td>\n        </tr>\n      );\n    }\n  };\n  useEffect(() => {\n    dragAndDrop(document.querySelectorAll(\"table tbody\"));\n  }, []);\n  useEffect(() => {\n    getTasks();\n  }, [updateTasks]);\n  return (\n    <TasksContext.Provider value={setupdateTasks}>\n      <table border={0} id=\"uncompleted_tasks_table\">\n        <thead>\n          <tr>\n            <td style={{ display: \"flex\", alignItems: \"center\" }}>\n              <h4>TO DO</h4>\n              <h6 style={{ margin: 10 }}>\n                tasks {uncompletedTasks ? uncompletedTasks.length : 0}\n              </h6>\n            </td>\n          </tr>\n        </thead>\n        <tbody>{uncompletedTasks}</tbody>\n      </table>\n      <table id=\"completed_tasks_table\">\n        <thead>\n          <tr>\n            <td\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <h4>COMPLETED</h4>\n              <h6 style={{ margin: 10 }}>\n                tasks {completedTasks ? completedTasks.length : 0}\n              </h6>\n            </td>\n          </tr>\n        </thead>\n        <tbody>{completedTasks}</tbody>\n      </table>\n    </TasksContext.Provider>\n  );\n}\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\CalendarView.js",["127"],[],"import \"./CalendarView.css\";\nimport Calendar from \"./Calendar\";\nimport CalendarTaskRow from \"./CalendarTaskRow\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function CalendarView() {\n  const [date, setDate] = useState();\n  const [uncompletedTasks, setuncompletedTasks] = useState();\n  const [completedTasks, setcompletedTasks] = useState();\n  const getTasks = async () => {\n    if (date) {\n      const { data } = await axios.get(\n        `http://localhost:3002/api/tasks/date/${date}`\n      );\n      if (data.success === true) {\n        const uncompleted = data.data\n          .filter((e) => e.completed === false)\n          .map((e, i) => {\n            return <CalendarTaskRow key={i} {...e} />;\n          });\n        setuncompletedTasks([...uncompleted]);\n        const completed = data.data\n          .filter((e) => e.completed === true)\n          .map((e, i) => {\n            return <CalendarTaskRow key={i} {...e} />;\n          });\n        setcompletedTasks([...completed]);\n      }\n    }\n  };\n  useEffect(() => {\n    getTasks();\n  }, [date]);\n  return (\n    <div id=\"calendar_view_container\">\n      <Calendar dateState={setDate} />\n      <div id=\"calendar_tasks_container\">\n        {completedTasks}\n        {uncompletedTasks}\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\CalendarTaskRow.js",["128"],[],"import { useRef } from \"react\";\nimport \"./CalendarTaskRow.css\";\n\nimport {icons} from \"./TaskListRow\"\n\nexport default function CalendarTaskRow({completed,title,category,dueDate,_id,time,description,path}){\n    const task = useRef();\n    return (\n        <div ref={task} className={ completed == true? \"calendar_task_row_container completed\" : \"calendar_task_row_container\"} onClick={\n            ()=>{\n                \n                task.current.classList = task.current.classList.value.includes(\"opened\")?task.current.classList.value.replace(\" opened\",\"\"):task.current.classList.value + \" opened\";\n            }\n        }>\n            <div>\n            {title}\n            </div>\n            <div>\n            {icons[category]}{category}\n            </div>\n            <div>\n            <i className=\"fa-solid fa-calendar-days\"></i>{dueDate}\n            </div>\n            <div>\n            <i className=\"fa-regular fa-clock\"></i>{time}\n            </div>\n            <div>\n            {description}\n            </div>\n        </div>\n    )\n}","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\Dashboard.js",["129","130","131"],[],"import \"./Dashboard.css\";\n\nimport { useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Login from \"../Log/Login\";\n\nexport default function Dashboard({ index }) {\n  const [list, calendar, board, smallAside, dash, logout] = [\n    useRef(),\n    useRef(),\n    useRef(),\n    useRef(),\n    useRef(),\n    useRef(),\n  ];\n  useEffect(() => {\n    [list, calendar, board, dash, logout].forEach((e) => (e.current.id = \"\"));\n    smallAside.current\n      .querySelectorAll(`ul .dash_list`)\n      .forEach((e) => (e.id = \"\"));\n    [list, calendar, board, dash, logout][index - 1].current.id = \"clicked\";\n    smallAside.current.querySelectorAll(`ul .dash_list`)[index - 1].id =\n      \"clicked\";\n  }, [index]);\n\n  window.addEventListener(\"resize\", () => {\n    if (window.innerWidth > 830) {\n      if (smallAside) {\n        if (smallAside.current != undefined || smallAside.current != null)\n          smallAside.current.style.display = \"none\";\n      }\n    }\n  });\n  // const handleLogout = () => {\n  //   // Clear user-related data from localStorage\n\n  //   localStorage.removeItem(\"username\");\n  //   alert(\"sanple\");\n  //   // localStorage.removeItem(\"token\");\n\n  //   // Additional cleanup or redirection logic if needed\n  //   // For example, redirecting the user to the login page\n  //   // history.push(\"/login\");\n  // };\n  return (\n    <>\n      <aside id=\"big_screen\">\n        <div id=\"logo_container\">\n          <h2>TO-DO-LIST</h2>\n        </div>\n        <ul>\n          <li className=\"dash_list\" key={1}>\n            {/* <i className=\"fa-solid fa-bars-staggered\"></i> <h5>Dashboard</h5> */}\n          </li>\n\n          <Link to={\"/ListView\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\" ref={list}>\n              <i className=\"fa-solid fa-list-check\"></i>\n              <h5>Task</h5>\n            </li>\n          </Link>\n          <Link to={\"/Calendar\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\" ref={calendar} key={2}>\n              <i className=\"fa-solid fa-calendar-days\"></i>\n              <h5>Calendar</h5>\n            </li>\n          </Link>\n          <Link to={\"/Board\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\" ref={board} key={3}>\n              <i className=\"fa-solid fa-clipboard-list\"></i>\n              <h5>Board</h5>\n            </li>\n          </Link>\n          <Link to={\"/dash\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\" ref={dash} key={4}>\n              <i className=\"fa-solid fa-list-check\"></i>\n              <h5>Dashboard</h5>\n            </li>\n          </Link>\n          <Link to={\"/login\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\" ref={logout} key={5}>\n              <i className=\"fa-solid fa-list-check\"></i>\n              <h5>Logout</h5>\n            </li>\n          </Link>\n        </ul>\n      </aside>\n      <aside id=\"small_screen\" ref={smallAside}>\n        <div\n          id=\"logo_container\"\n          onClick={() => (smallAside.current.style.display = \"none\")}\n        >\n          <h2>Logo</h2>\n        </div>\n        <ul>\n          <Link to={\"/ListView\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\">\n              <i className=\"fa-solid fa-list-check\"></i>\n              <h5>List</h5>\n            </li>\n          </Link>\n          <Link to={\"/Calendar\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\">\n              <i className=\"fa-solid fa-calendar-days\"></i>\n              <h5>Calendar</h5>\n            </li>\n          </Link>\n          <Link to={\"/Board\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\">\n              <i className=\"fa-solid fa-clipboard-list\"></i>\n              <h5>Board</h5>\n            </li>\n          </Link>\n          <Link to={\"/dash\"} style={{ textDecoration: \"none\" }}>\n            <li className=\"dash_list\">\n              <i className=\"fa-solid fa-list-check\"></i>\n              <h5>Dashboard</h5>\n            </li>\n          </Link>\n          <Link\n            to={\"/login\"}\n            style={{ textDecoration: \"none\" }}\n            // onClick={handleLogout}\n          >\n            <li className=\"dash_list\">\n              <i className=\"fa-solid fa-list-check\"></i>\n              <h5>Logout</h5>\n            </li>\n          </Link>\n        </ul>\n      </aside>\n    </>\n  );\n}\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\Calendar.js",["132","133","134"],[],"import { useEffect, useState } from \"react\";\nimport \"./Calendar.css\";\nimport CalendarBox from \"./CalendarBox\";\n\nconst days = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"];\nDate.prototype.monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\nlet Monthindex = new Date().getMonth();\nlet yearIndex = new Date().getFullYear();\nexport default function Calendar({ dateState }) {\n  const [boxes, setBoxes] = useState();\n  const [showDateInfo, setShowDateInfo] = useState(\n    Date.prototype.monthNames[Monthindex] + \" \" + yearIndex\n  );\n\n  const daysIndex = () => {\n    let jsx = [];\n    const currentDate = new Date(yearIndex, Monthindex, 0);\n    const day = currentDate.getDay();\n    const currenMonth = Monthindex;\n    currentDate.setDate(currentDate.getDate() + 1);\n    let backwardIndex = 1;\n    for (let i = 0; i < 42; i++) {\n      if (\n        Date.prototype.monthNames[currentDate.getMonth()] !=\n        Date.prototype.monthNames[currenMonth]\n      ) {\n        jsx.push(\n          <CalendarBox key={i} value={currentDate.getDate()} selected={false} />\n        );\n        currentDate.setDate(currentDate.getDate() + 1);\n      } else if (i >= day) {\n        jsx.push(\n          <CalendarBox\n            key={i + 42}\n            value={currentDate.getDate()}\n            setDate={dateState}\n            selected={true}\n          />\n        );\n        currentDate.setDate(currentDate.getDate() + 1);\n      } else {\n        jsx.push(\n          <CalendarBox\n            key={i + 90}\n            selected={false}\n            value={new Date(\n              yearIndex,\n              Monthindex,\n              1 - (day + 1 - backwardIndex)\n            ).getDate()}\n          />\n        );\n        backwardIndex++;\n      }\n    }\n    setBoxes(jsx);\n  };\n\n  const updateDate = (action) => {\n    if (action === \"right\") {\n      Monthindex++;\n      if (Monthindex >= Date.prototype.monthNames.length) {\n        Monthindex = 0;\n        yearIndex++;\n      }\n      setShowDateInfo(Date.prototype.monthNames[Monthindex] + \" \" + yearIndex);\n    } else {\n      Monthindex--;\n      if (Monthindex < 0) {\n        Monthindex = Date.prototype.monthNames.length - 1;\n        yearIndex--;\n      }\n      setShowDateInfo(Date.prototype.monthNames[Monthindex] + \" \" + yearIndex);\n    }\n  };\n  useEffect(() => {\n    daysIndex();\n  }, [Monthindex]);\n  return (\n    <div id=\"calendar_container\">\n      <div id=\"calendar_header\">\n        <button\n          className=\"calendar-btn\"\n          onClick={() => {\n            updateDate(\"left\");\n          }}\n        >\n          <i className=\"fa-solid fa-caret-left\"></i>\n        </button>\n        <h5>{showDateInfo}</h5>\n        <button\n          className=\"calendar-btn\"\n          onClick={() => {\n            updateDate(\"right\");\n          }}\n        >\n          <i className=\"fa-solid fa-caret-right\"></i>\n        </button>\n      </div>\n      <div className=\"days_container\">\n        {days.map((day, i) => (\n          <CalendarBox key={i} task={false} value={day} />\n        ))}\n      </div>\n      <div className=\"days_index_container\">{boxes}</div>\n    </div>\n  );\n}\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\TaskListRow.js",["135","136","137","138","139","140"],[],"import \"./TaskListRow.css\";\nimport { useRef,useEffect,useContext } from \"react\";\nimport { NotificationContext } from \"./ViewPage\";\nimport Notification from \"./Notification\";\nimport axios from \"axios\";\nimport { TasksContext } from \"./ListView\";\n\nexport const icons = {\n    Food:<i className=\"fa-solid fa-utensils\" style={{marginRight:\"10px\"}}></i>,\n    Map:<i className=\"fa-solid fa-map\" style={{marginRight:\"10px\"}}></i>,\n    Meeting:<i className=\"fa-solid fa-handshake\" style={{marginRight:\"10px\"}}></i>,\n    Travel:<i className=\"fa-solid fa-plane-arrival\" style={{marginRight:\"10px\"}}></i>,\n    Games:<i className=\"fa-solid fa-gamepad\" style={{marginRight:\"10px\"}}></i>,\n    Sport:<i className=\"fa-solid fa-volleyball\" style={{marginRight:\"10px\"}}></i>,\n    Other:<i className=\"fa-regular fa-circle-question\" style={{marginRight:\"10px\"}}></i>\n}\n\nexport default function TaskListRow({completed,title,category,dueDate,_id,time,description,path}){\n    const notification = useContext(NotificationContext);\n    const updateTask = useContext(TasksContext);\n    const checkDIV = useRef(null);\n    const dragStarted = (e)=>{\n        e.target.classList = \"item_row dragging closed\";\n    }\n    const dragEnded = (e)=>{\n        e.target.classList = \"item_row closed\";\n             if(e.target.id)\n                 checkDIV.current.click();\n        \n    }\n    const removeTask = async ()=>{\n        const {data} = await axios.delete(`http://localhost:3002/api/tasks/${_id}`);\n        if(data.success){\n            notification(currentValue=>{\n                if(currentValue){\n                    return [...currentValue,<Notification  msg={data.msg} type=\"success\"/>];\n                }\n                    return [<Notification  msg={data.msg} type=\"success\"/>]; \n            });\n            \n            updateTask(currVal=>{\n                return !currVal\n            })\n        }\n\n    };\n    const changeTaskData = async (e)=>{\n        if(e){\n            e.preventDefault();                        \n        }\n        const {data} = await axios.put(`http://localhost:3002/api/tasks/${_id}`,\n        {\n            completed : !completed\n        });\n        if(data.success){\n            notification(currentValue=>{\n                if(currentValue){\n                    return [...currentValue,<Notification  msg={data.msg} type=\"success\"/>];\n                }\n                    return [<Notification  msg={data.msg} type=\"success\"/>]; \n            });\n            \n            updateTask(currVal=>{\n                return !currVal\n            })\n        }\n        }\n        useEffect(()=>{\n            if(completed)\n            checkDIV.current.classList = \"checking checked\";\n            else\n            checkDIV.current.classList = \"checking\";\n        },[]);\n    return(\n        <tr className=\"item_row closed\" draggable=\"true\" onDragStart={dragStarted} onDragEnd={dragEnded} >\n            <td>\n                <i className=\"fa-solid fa-chevron-down\"   onClick={e=>{\n                    if(e.target.parentElement.parentElement.classList.value == \"item_row\" && e.target.parentElement.parentElement.classList.value != \"item_row dragging\"){\n                        e.target.parentElement.parentElement.classList = \"item_row closed\";\n                        \n                    }\n                    else{\n                        e.target.parentElement.parentElement.classList = \"item_row\";\n                    }\n                     } }></i>\n                    <div className=\"task_row_header\">\n                        <div className=\"\" ref={checkDIV} onClick ={changeTaskData}>\n                        <i className=\"fa-solid fa-check row\"></i>\n\n                        </div>\n                        <div  className=\"task_row_title\">\n                            <span style={{\n                                textDecorationLine:completed?\"line-through\":\"\"\n                            }}>\n                            {title}\n                            <i className=\"fa-solid fa-calendar-xmark\" onClick={removeTask}  style={{position:\"absolute\",bottom:\"10px\",right:\"10px\",transition:\"0.23s\",cursor:\"pointer\"}}></i>\n                            </span>\n                            <br></br>\n                            <i className=\"fa-solid fa-diagram-successor\"></i>\n                            <div style={{marginLeft:\"10px\"}}>\n                                {icons[category]}\n                                {category}\n                            </div>\n                            <div style={{marginLeft:\"10px\"}}>\n                                <i className=\"fa-solid fa-calendar-check\" style={{marginRight:\"10px\"}} ></i>\n                                {dueDate}\n                            </div>\n                            <div style={{marginLeft:\"10px\"}}>\n                                <i className=\"fa-solid fa-hourglass-half\" style={{marginRight:\"10px\"}}></i>\n                                {time}\n                            </div>\n                            <div style={{marginLeft:\"10px\"}}>\n                                <i className=\"fa-solid fa-comment\" style={{marginRight:\"10px\"}}></i>\n                                {description == \"\"?\"u didn't enter any description\":description}\n                            </div>\n                            <div style={{marginLeft:\"10px\",position:\"relative\"}}>\n                            <i className=\"fa-solid fa-image\" style={{marginRight:\"10px\",cursor:\"pointer\" ,display: path == \"/\"?\"none\":\"\"}} >\n\n                            </i>\n                            <div className=\"imgContainer\" style={{position:\"absolute\",top:0,left:\"30px\",zIndex:\"2\"}}> \n                                <img src={path} style={{maxWidth:\"200px\",maxHeight:\"200px\"}}/>\n                            </div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    \n            </td>\n\n        </tr>\n        \n    )\n}","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\BoardBox.js",["141","142","143","144","145","146","147"],[],"import axios from \"axios\";\nimport { useRef, useEffect, useContext } from \"react\";\nimport \"./BoardBox.css\";\nimport {icons} from \"./TaskListRow\";\nimport { NotificationContext } from \"./ViewPage\";\nimport Notification from \"./Notification\";\nimport { TasksContext } from \"./BoardView\"\nDate.prototype.monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\",\n    \"October\", \"November\", \"December\"\n];\nfunction getDateFormula(dueDate) {\n    let day = \"\";\n    let month = \"\";\n    let year = \"\";\n    for (let i =0; i<dueDate.length;i++){\n        if(dueDate[i] != \"/\"){\n            day += dueDate[i];\n        }\n        else{\n            year = dueDate.slice(i+1,dueDate.length);\n            break\n        }\n    }\n    for (let i =0; i<year.length;i++){\n        if(year[i] != \"/\"){\n            month += year[i];\n        }\n        else{\n            month = Date.prototype.monthNames[Number(month-1)]\n            year = year.slice(i+1,dueDate.length);\n            break\n        }\n    }\n    return [day,month,year]\n}\nexport default function BoardBox({ completed,title,category,dueDate,_id,time,description,path }){\n    const notification = useContext(NotificationContext);\n    const updateTask = useContext(TasksContext);\n\n    const [titleref,container] = [useRef(),useRef()];\n    const dragStarted = (e)=>{\n        container.current.classList = `board_box_container closed ${category} dragging`;\n    }\n    const dragEnded = async (e)=>{\n        container.current.classList = `board_box_container closed ${category}`; \n        if(container.current.id){\n            e.preventDefault();                        \n            const {data} = await axios.put(`http://localhost:3002/api/tasks/${_id}`,\n            {\n                completed : !completed\n            });\n            if(data.success){\n                notification(currentValue=>{\n                    if(currentValue){\n                        return [...currentValue,<Notification  msg={data.msg} type=\"success\"/>];\n                    }\n                        return [<Notification  msg={data.msg} type=\"success\"/>]; \n                });\n                \n                updateTask(currVal=>{\n                    return !currVal\n                })\n            }\n            }\n        \n    }\n    const removeTask = async ()=>{\n        const {data} = await axios.delete(`http://localhost:3002/api/tasks/${_id}`);\n        if(data.success){\n            notification(currentValue=>{\n                if(currentValue){\n                    return [...currentValue,<Notification  msg={data.msg} type=\"success\"/>];\n                }\n                    return [<Notification  msg={data.msg} type=\"success\"/>]; \n            });\n            \n            updateTask(currVal=>{\n                return !currVal\n            })\n        }\n\n    };\n    useEffect(() => {\n        if(title.length > 34){\n            title = title.slice(0,31).trim() + \"...\";\n            titleref.current.textContent = title;\n        }\n        else{\n            titleref.current.textContent = title.trim();\n        }\n    },[title]);\n    \n    return(\n        <div draggable=\"true\"  onDragStart={dragStarted} onDragEnd={dragEnded} className={`board_box_container closed ${category}`} ref={container} onClick={()=>{\n            container.current.classList = container.current.classList.value == `board_box_container opened ${category}` ? `board_box_container closed ${category}` : `board_box_container opened ${category}`\n        }}>\n            <i className=\"fa-solid fa-xmark\" onClick={removeTask}></i>\n            <div className=\"box_icon_container\">\n                <div className=\"icon_container\">\n                    {icons[category]}  \n                </div>\n            </div>\n                <div className=\"box_info_container\">\n                <h4 ref={titleref}></h4>\n                <h6>{`${getDateFormula(dueDate)[0]} ${getDateFormula(dueDate)[1]} ${ getDateFormula(dueDate)[2]} > `}  {time}</h6>\n                </div>\n                <div className=\"back_info\">\n                <p>\n                    {description}\n                </p>\n                </div>\n               {path != \"/\"?<img src={path} alt=\"\"/> : \"\"}\n                  \n        </div>\n    )\n}","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\TaskForm.js",["148"],[],"import \"./TaskForm.css\";\nimport { forwardRef, useContext, useRef, useState } from \"react\";\nimport Calendar from \"./Calendar\";\nimport axios from \"axios\";\nimport { NotificationContext } from \"./ViewPage\";\nimport Notification from \"./Notification\";\nconst TaskForm = forwardRef(({ reRendertasks }, ref) => {\n  let userloginname = localStorage.getItem(\"username\");\n  const notification = useContext(NotificationContext);\n\n  const [\n    tasknameInput,\n    taskCategoryInput,\n    HourInput,\n    minutesInput,\n    descriptionInput,\n    pathInput,\n  ] = [useRef(), useRef(), useRef(), useRef(), useRef(), useRef()];\n  const sendData = async () => {\n    const task = {\n      title: tasknameInput.current.value,\n      category: taskCategoryInput.current.value,\n      dueDate: date,\n      time: HourInput.current.value + \":\" + minutesInput.current.value,\n      description: descriptionInput.current.value,\n      path:\n        pathInput.current.value == \"\"\n          ? \"/\"\n          : pathInput.current.value.replace(\"C:\\\\fakepath\\\\\", \"uploads/\"),\n      username: userloginname,\n    };\n    try {\n      const { data } = await axios.post(\n        \"http://localhost:3002/api/tasks/add\",\n        task\n      );\n      if (data.success === true) {\n        notification((currentValue) => {\n          if (currentValue) {\n            return [\n              ...currentValue,\n              <Notification msg={data.msg} type=\"success\" />,\n            ];\n          }\n          return [<Notification msg={data.msg} type=\"success\" />];\n        });\n        reRendertasks((re) => (re === true ? false : true));\n        const img = document.querySelector('input[type=\"file\"]').files[0];\n        if (img) {\n          const { data } = await axios.post(\n            \"http://localhost:3002/api/tasks/upload\",\n            {\n              image: img,\n            },\n            {\n              headers: {\n                \"Content-Type\": \"multipart/form-data\",\n              },\n            }\n          );\n          notification((currentValue) => {\n            if (currentValue) {\n              return [\n                ...currentValue,\n                <Notification msg={data} type=\"success\" />,\n              ];\n            }\n            return [<Notification msg={data} type=\"success\" />];\n          });\n        }\n        tasknameInput.current.value = \"\";\n        tasknameInput.current.value = \"\";\n        HourInput.current.value = \"\";\n        minutesInput.current.value = \"\";\n        descriptionInput.current.value = \"\";\n        pathInput.current.value = \"\";\n\n        ref.current.style.display = \"none\";\n      } else {\n        data.msg.forEach((msg, i) => {\n          notification((currentValue) => {\n            if (currentValue === undefined) {\n              return [<Notification key={i} type={\"error\"} msg={msg} />];\n            }\n            return [\n              ...currentValue,\n              <Notification key={i} type={\"error\"} msg={msg} />,\n            ];\n          });\n        });\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const [date, setDate] = useState(\"dd-mm-yyyy\");\n  return (\n    <div\n      id=\"form_container\"\n      ref={ref}\n      onClick={(e) => {\n        if (\n          e.target.id === ref.current.id ||\n          e.target.id === \"close_form\" ||\n          e.target.classList[1] === \"fa-xmark\"\n        )\n          ref.current.style.display = \"none\";\n      }}\n    >\n      <div id=\"form_holder\">\n        <div id=\"close_form\">\n          <i className=\"fa-solid fa-xmark\"></i>\n        </div>\n        <div id=\"infos_form_container\">\n          <div id=\"calendar_form_container\">\n            <Calendar dateState={setDate} />\n          </div>\n          <div id=\"inputs_form_container\">\n            <div className=\"input_con\">\n              <span>Task name</span>\n              <input\n                type=\"text\"\n                placeholder=\"task name\"\n                id=\"task_name_input\"\n                ref={tasknameInput}\n              />\n            </div>\n            <div className=\"input_con\">\n              <span>Category</span>\n              <select\n                id=\"category_select\"\n                className=\"fa\"\n                ref={taskCategoryInput}\n              >\n                <option className=\"fa\" value=\"Food\">\n                  {\" \"}\n                  &nbsp; Food\n                </option>\n                <option className=\"fa\" value=\"Map\">\n                  &nbsp; Map\n                </option>\n                <option className=\"fa\" value=\"Meeting\">\n                  {\" \"}\n                  &nbsp; Meeting\n                </option>\n                <option className=\"fa\" value=\"Travel\">\n                  {\" \"}\n                  &nbsp; Travel\n                </option>\n                <option className=\"fa\" value=\"Games\">\n                  {\" \"}\n                  &nbsp; Games\n                </option>\n                <option className=\"fa\" value=\"Sport\">\n                  {\" \"}\n                  &nbsp; Sport\n                </option>\n                <option className=\"fa\" value=\"Other\">\n                  Other\n                </option>\n              </select>\n            </div>\n            <div className=\"date_picker\">\n              <div id=\"date_displayer\">\n                {date}{\" \"}\n                <div id=\"calendar_icon_con\">\n                  <i className=\"fa-solid fa-calendar-check\"></i>\n                </div>\n              </div>\n              <div id=\"time_input\">\n                <input type=\"number\" placeholder=\"H\" ref={HourInput} /> :{\" \"}\n                <input type=\"number\" placeholder=\"M\" ref={minutesInput} />\n                <div id=\"clock_icon_con\">\n                  <i className=\"fa-solid fa-clock\"></i>\n                </div>\n              </div>\n            </div>\n            <div className=\"input_con desc_con\">\n              <span>Description</span>\n              <textarea ref={descriptionInput} cols={40} rows={100}></textarea>\n            </div>\n            <div className=\"upload_send_container\">\n              <input\n                type=\"file\"\n                multiple\n                accept=\"image/*\"\n                id=\"file\"\n                ref={pathInput}\n              />\n              <button\n                id=\"upload\"\n                onClick={() => {\n                  document.querySelector(\"#file\").click();\n                }}\n              >\n                Upload <i className=\"fa-solid fa-paperclip\" />\n              </button>\n              <button id=\"upload\" onClick={sendData}>\n                Send <i className=\"fa-regular fa-paper-plane\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\nexport default TaskForm;\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\SearchNav.js",["149"],[],"import \"./SearchNav.css\";\nimport logo from \"../pics/1.jpg\";\n\nexport default function SearchNav() {\n  return (\n    <nav className=\"search_nav\">\n      <i\n        className=\"fa-solid fa-bars-staggered\"\n        onClick={() =>\n          (document.querySelector(\"#small_screen\").style.display = \"block\")\n        }\n      ></i>\n\n      <div id=\"search_input_container\">\n        <i className=\"fa-solid fa-magnifying-glass\"></i>\n        <input type=\"search\" placeholder=\"Search\" id=\"search_input\" />\n      </div>\n      <div id=\"profile_container\">\n        <i className=\"fa-solid fa-clock-rotate-left\"></i>\n\n        <div id=\"profileImg\">\n          <img src={logo} id=\"logo\" />\n        </div>\n      </div>\n    </nav>\n  );\n}\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\CalendarBox.js",["150","151","152","153","154","155"],[],"import axios from \"axios\";\nimport { useEffect, useRef } from \"react\";\nimport \"./CalendarBox.css\";\nDate.prototype.monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport default function CalendarBox({ value, selected, setDate }) {\n  const [box, textHolder] = [useRef(), useRef()];\n  const toggle = (selectedbox) => {\n    if (selected === true) {\n      if (document.querySelector(\"#theOne\") != undefined) {\n        document.querySelector(\"#theOne\").id = \"\";\n      }\n      if (\n        selectedbox.target.classList.value === \"calender_box_container selected\"\n      ) {\n        if (selectedbox.target.id != \"theOne\") {\n          selectedbox.target.id = \"theOne\";\n          if (setDate) {\n            const month =\n              Date.prototype.monthNames.indexOf(\n                document\n                  .querySelector(\"#calendar_header h5\")\n                  .textContent.replace(/[0-9]/g, \"\")\n                  .trim()\n              ) + 1;\n            const year = document\n              .querySelector(\"#calendar_header h5\")\n              .textContent.replace(/\\D/g, \"\")\n              .trim();\n            setDate(`${selectedbox.target.textContent}/${month}/${year}`);\n          }\n        }\n      } else {\n        if (selectedbox.target.parentElement.id != \"theOne\") {\n          selectedbox.target.parentElement.id = \"theOne\";\n          if (setDate) {\n            const month =\n              Date.prototype.monthNames.indexOf(\n                document\n                  .querySelector(\"#calendar_header h5\")\n                  .textContent.replace(/[0-9]/g, \"\")\n                  .trim()\n              ) + 1;\n            const year = document\n              .querySelector(\"#calendar_header h5\")\n              .textContent.replace(/\\D/g, \"\")\n              .trim();\n            setDate(`${textHolder.current.textContent}/${month}/${year}`);\n          }\n        }\n      }\n    }\n  };\n  const getDate = async () => {\n    const month =\n      Date.prototype.monthNames.indexOf(\n        document\n          .querySelector(\"#calendar_header h5\")\n          .textContent.replace(/[0-9]/g, \"\")\n          .trim()\n      ) + 1;\n    const year = document\n      .querySelector(\"#calendar_header h5\")\n      .textContent.replace(/\\D/g, \"\")\n      .trim();\n    let date = `${value}/${month}/${year}`;\n    const { data } = await axios.get(\n      `http://localhost:3002/api/tasks/date/${date}`\n    );\n    if (data.success === true && data.data.length > 0 && selected === true) {\n      textHolder.current.classList = \"task\";\n    }\n  };\n  useEffect(() => {\n    if (document.querySelector(\"#theOne\") != null) {\n      document.querySelector(\"#theOne\").id = \"\";\n    }\n    if (selected === true) {\n      box.current.classList = \"calender_box_container selected\";\n    } else {\n      box.current.classList = \"calender_box_container unselected\";\n    }\n  }, [selected]);\n  useEffect(() => {\n    textHolder.current.classList = \"\";\n    getDate();\n  }, [value]);\n\n  return (\n    <div ref={box} className=\"calender_box_container\" onClick={toggle}>\n      <span ref={textHolder}>{value}</span>\n      <div></div>\n    </div>\n  );\n}\n","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\component\\Notification.js",["156","157","158"],[],"import { useEffect, useRef } from \"react\";\nimport \"./Notification.css\";\n\n\nexport default function Notification ({type, msg}){\n    const notifType = type == \"success\" ? \"success_notif\" : type=\"error\" ?\"error_notif\":\"\";\n    const notif = useRef();\n    useEffect(()=>{\n        if(notif.current){\n            setTimeout(()=>{\n                    notif.current.style.animation = \"leave 0.5s\";\n                setTimeout(() => {\n                        notif.current.remove();\n                    \n                }, 500);\n            },5000);\n        }\n\n    },[])\n    return(      \n        <div className= {\"notification \" + notifType} ref={notif}> \n            <div className={`notif_icon ${type == \"success\" ? \"success_icon\" : type=\"error\" ?\"error_icon\":\"\"}`}>\n            \n            <i className={`fa-solid ${type == \"success\" ? \"fa-circle-check\" : type=\"error\" ?\"fa-triangle-exclamation\":\"\"}`}></i>\n            </div>\n            {msg}\n            <i className=\"fa-solid fa-xmark\" onClick={e=>e.target.parentElement.remove()}></i>\n        </div>\n    )\n}","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Log\\Login.js",["159","160"],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Log\\Register.js",[],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Route\\AppRoutes.js",[],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Dash\\Dash2.js",["161","162","163","164","165","166","167","168","169","170"],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\front\\Portfolio.js",["171","172","173"],[],"C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\src\\Admin\\Admin.js",["174"],[],{"ruleId":"175","severity":1,"message":"176","line":3,"column":8,"nodeType":"177","messageId":"178","endLine":3,"endColumn":17},{"ruleId":"179","severity":1,"message":"180","line":26,"column":6,"nodeType":"181","endLine":26,"endColumn":12,"suggestions":"182"},{"ruleId":"179","severity":1,"message":"183","line":39,"column":6,"nodeType":"181","endLine":39,"endColumn":19,"suggestions":"184"},{"ruleId":"185","severity":1,"message":"186","line":13,"column":57,"nodeType":"187","messageId":"188","endLine":13,"endColumn":59},{"ruleId":"185","severity":1,"message":"186","line":27,"column":43,"nodeType":"187","messageId":"188","endLine":27,"endColumn":45},{"ruleId":"179","severity":1,"message":"183","line":99,"column":6,"nodeType":"181","endLine":99,"endColumn":19,"suggestions":"189"},{"ruleId":"179","severity":1,"message":"183","line":34,"column":6,"nodeType":"181","endLine":34,"endColumn":12,"suggestions":"190"},{"ruleId":"185","severity":1,"message":"191","line":9,"column":47,"nodeType":"187","messageId":"188","endLine":9,"endColumn":49},{"ruleId":"175","severity":1,"message":"192","line":5,"column":8,"nodeType":"177","messageId":"178","endLine":5,"endColumn":13},{"ruleId":"179","severity":1,"message":"193","line":24,"column":6,"nodeType":"181","endLine":24,"endColumn":13,"suggestions":"194"},{"ruleId":"185","severity":1,"message":"186","line":29,"column":32,"nodeType":"187","messageId":"188","endLine":29,"endColumn":34},{"ruleId":"195","severity":1,"message":"196","line":6,"column":1,"nodeType":"197","messageId":"188","endLine":19,"endColumn":2},{"ruleId":"185","severity":1,"message":"186","line":37,"column":59,"nodeType":"187","messageId":"188","endLine":37,"endColumn":61},{"ruleId":"179","severity":1,"message":"198","line":91,"column":6,"nodeType":"181","endLine":91,"endColumn":18,"suggestions":"199"},{"ruleId":"179","severity":1,"message":"200","line":73,"column":11,"nodeType":"181","endLine":73,"endColumn":13,"suggestions":"201"},{"ruleId":"185","severity":1,"message":"191","line":78,"column":77,"nodeType":"187","messageId":"188","endLine":78,"endColumn":79},{"ruleId":"185","severity":1,"message":"186","line":78,"column":147,"nodeType":"187","messageId":"188","endLine":78,"endColumn":149},{"ruleId":"185","severity":1,"message":"191","line":114,"column":46,"nodeType":"187","messageId":"188","endLine":114,"endColumn":48},{"ruleId":"185","severity":1,"message":"191","line":117,"column":121,"nodeType":"187","messageId":"188","endLine":117,"endColumn":123},{"ruleId":"202","severity":1,"message":"203","line":121,"column":33,"nodeType":"204","endLine":121,"endColumn":95},{"ruleId":"195","severity":1,"message":"196","line":8,"column":1,"nodeType":"197","messageId":"188","endLine":13,"endColumn":2},{"ruleId":"185","severity":1,"message":"186","line":19,"column":23,"nodeType":"187","messageId":"188","endLine":19,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":28,"column":20,"nodeType":"187","messageId":"188","endLine":28,"endColumn":22},{"ruleId":"179","severity":1,"message":"205","line":88,"column":21,"nodeType":"187","endLine":88,"endColumn":53},{"ruleId":"185","severity":1,"message":"191","line":98,"column":77,"nodeType":"187","messageId":"188","endLine":98,"endColumn":79},{"ruleId":"206","severity":1,"message":"207","line":107,"column":17,"nodeType":"204","endLine":107,"endColumn":36},{"ruleId":"185","severity":1,"message":"186","line":115,"column":22,"nodeType":"187","messageId":"188","endLine":115,"endColumn":24},{"ruleId":"185","severity":1,"message":"191","line":27,"column":33,"nodeType":"187","messageId":"188","endLine":27,"endColumn":35},{"ruleId":"202","severity":1,"message":"203","line":22,"column":11,"nodeType":"204","endLine":22,"endColumn":39},{"ruleId":"195","severity":1,"message":"196","line":4,"column":1,"nodeType":"197","messageId":"188","endLine":17,"endColumn":2},{"ruleId":"185","severity":1,"message":"186","line":23,"column":45,"nodeType":"187","messageId":"188","endLine":23,"endColumn":47},{"ruleId":"185","severity":1,"message":"186","line":29,"column":35,"nodeType":"187","messageId":"188","endLine":29,"endColumn":37},{"ruleId":"185","severity":1,"message":"186","line":47,"column":49,"nodeType":"187","messageId":"188","endLine":47,"endColumn":51},{"ruleId":"179","severity":1,"message":"208","line":96,"column":6,"nodeType":"181","endLine":96,"endColumn":16,"suggestions":"209"},{"ruleId":"179","severity":1,"message":"210","line":100,"column":6,"nodeType":"181","endLine":100,"endColumn":13,"suggestions":"211"},{"ruleId":"185","severity":1,"message":"191","line":6,"column":28,"nodeType":"187","messageId":"188","endLine":6,"endColumn":30},{"ruleId":"185","severity":1,"message":"191","line":22,"column":48,"nodeType":"187","messageId":"188","endLine":22,"endColumn":50},{"ruleId":"185","severity":1,"message":"191","line":24,"column":44,"nodeType":"187","messageId":"188","endLine":24,"endColumn":46},{"ruleId":"212","severity":1,"message":"213","line":6,"column":16,"nodeType":"214","messageId":"188","endLine":6,"endColumn":18},{"ruleId":"185","severity":1,"message":"191","line":27,"column":39,"nodeType":"187","messageId":"188","endLine":27,"endColumn":41},{"ruleId":"175","severity":1,"message":"215","line":4,"column":34,"nodeType":"177","messageId":"178","endLine":4,"endColumn":44},{"ruleId":"175","severity":1,"message":"216","line":12,"column":10,"nodeType":"177","messageId":"178","endLine":12,"endColumn":21},{"ruleId":"175","severity":1,"message":"217","line":12,"column":23,"nodeType":"177","messageId":"178","endLine":12,"endColumn":37},{"ruleId":"175","severity":1,"message":"218","line":13,"column":10,"nodeType":"177","messageId":"178","endLine":13,"endColumn":26},{"ruleId":"175","severity":1,"message":"219","line":13,"column":28,"nodeType":"177","messageId":"178","endLine":13,"endColumn":47},{"ruleId":"175","severity":1,"message":"220","line":14,"column":10,"nodeType":"177","messageId":"178","endLine":14,"endColumn":24},{"ruleId":"175","severity":1,"message":"221","line":14,"column":26,"nodeType":"177","messageId":"178","endLine":14,"endColumn":43},{"ruleId":"179","severity":1,"message":"222","line":74,"column":6,"nodeType":"181","endLine":74,"endColumn":8,"suggestions":"223"},{"ruleId":"185","severity":1,"message":"191","line":78,"column":54,"nodeType":"187","messageId":"188","endLine":78,"endColumn":56},{"ruleId":"185","severity":1,"message":"191","line":79,"column":56,"nodeType":"187","messageId":"188","endLine":79,"endColumn":58},{"ruleId":"175","severity":1,"message":"224","line":8,"column":21,"nodeType":"177","messageId":"178","endLine":8,"endColumn":33},{"ruleId":"225","severity":1,"message":"226","line":45,"column":13,"nodeType":"204","endLine":45,"endColumn":35},{"ruleId":"225","severity":1,"message":"226","line":52,"column":13,"nodeType":"204","endLine":52,"endColumn":35},{"ruleId":"175","severity":1,"message":"215","line":2,"column":42,"nodeType":"177","messageId":"178","endLine":2,"endColumn":52},"no-unused-vars","'SearchNav' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'index'. Either include it or remove the dependency array. If 'setDashbaord' needs the current value of 'index', you can also switch to useReducer instead of useState and read 'index' in the reducer.","ArrayExpression",["227"],"React Hook useEffect has a missing dependency: 'getTasks'. Either include it or remove the dependency array.",["228"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["229"],["230"],"Expected '===' and instead saw '=='.","'Login' is defined but never used.","React Hook useEffect has missing dependencies: 'board', 'calendar', 'dash', 'list', 'logout', and 'smallAside'. Either include them or remove the dependency array.",["231"],"no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","React Hook useEffect has a missing dependency: 'daysIndex'. Either include it or remove the dependency array. Outer scope values like 'Monthindex' aren't valid dependencies because mutating them doesn't re-render the component.",["232"],"React Hook useEffect has a missing dependency: 'completed'. Either include it or remove the dependency array.",["233"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Assignments to the 'title' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","React Hook useEffect has a missing dependency: 'box'. Either include it or remove the dependency array.",["234"],"React Hook useEffect has missing dependencies: 'getDate' and 'textHolder'. Either include them or remove the dependency array.",["235"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'Typography' is defined but never used.","'updateTasks' is assigned a value but never used.","'setupdateTasks' is assigned a value but never used.","'uncompletedTasks' is assigned a value but never used.","'setuncompletedTasks' is assigned a value but never used.","'completedTasks' is assigned a value but never used.","'setcompletedTasks' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userloginname'. Either include it or remove the dependency array.",["236"],"'setIsHovered' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"239","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"Update the dependencies array to be: [index, view]",{"range":"256","text":"257"},"Update the dependencies array to be: [getTasks, updateTasks]",{"range":"258","text":"259"},{"range":"260","text":"259"},"Update the dependencies array to be: [date, getTasks]",{"range":"261","text":"262"},"Update the dependencies array to be: [board, calendar, dash, index, list, logout, smallAside]",{"range":"263","text":"264"},"Update the dependencies array to be: [daysIndex]",{"range":"265","text":"266"},"Update the dependencies array to be: [completed]",{"range":"267","text":"268"},"Update the dependencies array to be: [box, selected]",{"range":"269","text":"270"},"Update the dependencies array to be: [getDate, textHolder, value]",{"range":"271","text":"272"},"Update the dependencies array to be: [userloginname]",{"range":"273","text":"274"},[906,912],"[index, view]",[1318,1331],"[getTasks, updateTasks]",[3042,3055],[1084,1090],"[date, getTasks]",[715,722],"[board, calendar, dash, index, list, logout, smallAside]",[2411,2423],"[daysIndex]",[2755,2757],"[completed]",[2940,2950],"[box, selected]",[3032,3039],"[getDate, textHolder, value]",[2403,2405],"[userloginname]"]