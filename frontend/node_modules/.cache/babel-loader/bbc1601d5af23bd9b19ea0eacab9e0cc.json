{"ast":null,"code":"// src/Animated.ts\nimport { defineHidden } from \"@react-spring/shared\";\nvar $node = Symbol.for(\"Animated:node\");\nvar isAnimated = value => !!value && value[$node] === value;\nvar getAnimated = owner => owner && owner[$node];\nvar setAnimated = (owner, node) => defineHidden(owner, $node, node);\nvar getPayload = owner => owner && owner[$node] && owner[$node].getPayload();\nvar Animated = class {\n  constructor() {\n    setAnimated(this, this);\n  }\n  /** Get every `AnimatedValue` used by this node. */\n  getPayload() {\n    return this.payload || [];\n  }\n};\n\n// src/AnimatedValue.ts\nimport { is } from \"@react-spring/shared\";\nvar AnimatedValue = class extends Animated {\n  constructor(_value) {\n    super();\n    this._value = _value;\n    this.done = true;\n    this.durationProgress = 0;\n    if (is.num(this._value)) {\n      this.lastPosition = this._value;\n    }\n  }\n  /** @internal */\n  static create(value) {\n    return new AnimatedValue(value);\n  }\n  getPayload() {\n    return [this];\n  }\n  getValue() {\n    return this._value;\n  }\n  setValue(value, step) {\n    if (is.num(value)) {\n      this.lastPosition = value;\n      if (step) {\n        value = Math.round(value / step) * step;\n        if (this.done) {\n          this.lastPosition = value;\n        }\n      }\n    }\n    if (this._value === value) {\n      return false;\n    }\n    this._value = value;\n    return true;\n  }\n  reset() {\n    const {\n      done\n    } = this;\n    this.done = false;\n    if (is.num(this._value)) {\n      this.elapsedTime = 0;\n      this.durationProgress = 0;\n      this.lastPosition = this._value;\n      if (done) this.lastVelocity = null;\n      this.v0 = null;\n    }\n  }\n};\n\n// src/AnimatedString.ts\nimport { is as is2, createInterpolator } from \"@react-spring/shared\";\nvar AnimatedString = class extends AnimatedValue {\n  constructor(value) {\n    super(0);\n    this._string = null;\n    this._toString = createInterpolator({\n      output: [value, value]\n    });\n  }\n  /** @internal */\n  static create(value) {\n    return new AnimatedString(value);\n  }\n  getValue() {\n    const value = this._string;\n    return value == null ? this._string = this._toString(this._value) : value;\n  }\n  setValue(value) {\n    if (is2.str(value)) {\n      if (value == this._string) {\n        return false;\n      }\n      this._string = value;\n      this._value = 1;\n    } else if (super.setValue(value)) {\n      this._string = null;\n    } else {\n      return false;\n    }\n    return true;\n  }\n  reset(goal) {\n    if (goal) {\n      this._toString = createInterpolator({\n        output: [this.getValue(), goal]\n      });\n    }\n    this._value = 0;\n    super.reset();\n  }\n};\n\n// src/AnimatedArray.ts\nimport { isAnimatedString } from \"@react-spring/shared\";\n\n// src/AnimatedObject.ts\nimport { each, eachProp, getFluidValue, hasFluidValue } from \"@react-spring/shared\";\n\n// src/context.ts\nvar TreeContext = {\n  dependencies: null\n};\n\n// src/AnimatedObject.ts\nvar AnimatedObject = class extends Animated {\n  constructor(source) {\n    super();\n    this.source = source;\n    this.setValue(source);\n  }\n  getValue(animated) {\n    const values = {};\n    eachProp(this.source, (source, key) => {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated);\n      } else if (hasFluidValue(source)) {\n        values[key] = getFluidValue(source);\n      } else if (!animated) {\n        values[key] = source;\n      }\n    });\n    return values;\n  }\n  /** Replace the raw object data */\n  setValue(source) {\n    this.source = source;\n    this.payload = this._makePayload(source);\n  }\n  reset() {\n    if (this.payload) {\n      each(this.payload, node => node.reset());\n    }\n  }\n  /** Create a payload set. */\n  _makePayload(source) {\n    if (source) {\n      const payload = /* @__PURE__ */new Set();\n      eachProp(source, this._addToPayload, payload);\n      return Array.from(payload);\n    }\n  }\n  /** Add to a payload set. */\n  _addToPayload(source) {\n    if (TreeContext.dependencies && hasFluidValue(source)) {\n      TreeContext.dependencies.add(source);\n    }\n    const payload = getPayload(source);\n    if (payload) {\n      each(payload, node => this.add(node));\n    }\n  }\n};\n\n// src/AnimatedArray.ts\nvar AnimatedArray = class extends AnimatedObject {\n  constructor(source) {\n    super(source);\n  }\n  /** @internal */\n  static create(source) {\n    return new AnimatedArray(source);\n  }\n  getValue() {\n    return this.source.map(node => node.getValue());\n  }\n  setValue(source) {\n    const payload = this.getPayload();\n    if (source.length == payload.length) {\n      return payload.map((node, i) => node.setValue(source[i])).some(Boolean);\n    }\n    super.setValue(source.map(makeAnimated));\n    return true;\n  }\n};\nfunction makeAnimated(value) {\n  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;\n  return nodeType.create(value);\n}\n\n// src/getAnimatedType.ts\nimport { is as is3, isAnimatedString as isAnimatedString2 } from \"@react-spring/shared\";\nfunction getAnimatedType(value) {\n  const parentNode = getAnimated(value);\n  return parentNode ? parentNode.constructor : is3.arr(value) ? AnimatedArray : isAnimatedString2(value) ? AnimatedString : AnimatedValue;\n}\n\n// src/createHost.ts\nimport { is as is5, eachProp as eachProp2 } from \"@react-spring/shared\";\n\n// src/withAnimated.tsx\nimport * as React from \"react\";\nimport { forwardRef, useRef, useCallback, useEffect } from \"react\";\nimport { is as is4, each as each2, raf, useForceUpdate, useOnce, addFluidObserver, removeFluidObserver, useIsomorphicLayoutEffect } from \"@react-spring/shared\";\nvar withAnimated = (Component, host) => {\n  const hasInstance =\n  // Function components must use \"forwardRef\" to avoid being\n  // re-rendered on every animation frame.\n  !is4.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n  return forwardRef((givenProps, givenRef) => {\n    const instanceRef = useRef(null);\n    const ref = hasInstance &&\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useCallback(value => {\n      instanceRef.current = updateRef(givenRef, value);\n    }, [givenRef]);\n    const [props, deps] = getAnimatedState(givenProps, host);\n    const forceUpdate = useForceUpdate();\n    const callback = () => {\n      const instance = instanceRef.current;\n      if (hasInstance && !instance) {\n        return;\n      }\n      const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    };\n    const observer = new PropsObserver(callback, deps);\n    const observerRef = useRef();\n    useIsomorphicLayoutEffect(() => {\n      observerRef.current = observer;\n      each2(deps, dep => addFluidObserver(dep, observer));\n      return () => {\n        if (observerRef.current) {\n          each2(observerRef.current.deps, dep => removeFluidObserver(dep, observerRef.current));\n          raf.cancel(observerRef.current.update);\n        }\n      };\n    });\n    useEffect(callback, []);\n    useOnce(() => () => {\n      const observer2 = observerRef.current;\n      each2(observer2.deps, dep => removeFluidObserver(dep, observer2));\n    });\n    const usedProps = host.getComponentProps(props.getValue());\n    return /* @__PURE__ */React.createElement(Component, {\n      ...usedProps,\n      ref\n    });\n  });\n};\nvar PropsObserver = class {\n  constructor(update, deps) {\n    this.update = update;\n    this.deps = deps;\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      raf.write(this.update);\n    }\n  }\n};\nfunction getAnimatedState(props, host) {\n  const dependencies = /* @__PURE__ */new Set();\n  TreeContext.dependencies = dependencies;\n  if (props.style) props = {\n    ...props,\n    style: host.createAnimatedStyle(props.style)\n  };\n  props = new AnimatedObject(props);\n  TreeContext.dependencies = null;\n  return [props, dependencies];\n}\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is4.fun(ref)) ref(value);else ref.current = value;\n  }\n  return value;\n}\n\n// src/createHost.ts\nvar cacheKey = Symbol.for(\"AnimatedComponent\");\nvar createHost = function (components) {\n  let {\n    applyAnimatedValues = () => false,\n    createAnimatedStyle = style => new AnimatedObject(style),\n    getComponentProps = props => props\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const hostConfig = {\n    applyAnimatedValues,\n    createAnimatedStyle,\n    getComponentProps\n  };\n  const animated = Component => {\n    const displayName = getDisplayName(Component) || \"Anonymous\";\n    if (is5.str(Component)) {\n      Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n    Component.displayName = `Animated(${displayName})`;\n    return Component;\n  };\n  eachProp2(components, (Component, key) => {\n    if (is5.arr(components)) {\n      key = getDisplayName(Component);\n    }\n    animated[key] = animated(Component);\n  });\n  return {\n    animated\n  };\n};\nvar getDisplayName = arg => is5.str(arg) ? arg : arg && is5.str(arg.displayName) ? arg.displayName : is5.fun(arg) && arg.name || null;\nexport { Animated, AnimatedArray, AnimatedObject, AnimatedString, AnimatedValue, createHost, getAnimated, getAnimatedType, getPayload, isAnimated, setAnimated };","map":{"version":3,"mappings":"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","names":["defineHidden","$node","Symbol","for","isAnimated","value","getAnimated","owner","setAnimated","node","getPayload","Animated","constructor","payload","is","AnimatedValue","_value","num","lastPosition","create","getValue","setValue","step","Math","round","done","reset","elapsedTime","durationProgress","lastVelocity","v0","createInterpolator","AnimatedString","_string","_toString","output","str","goal","isAnimatedString","each","eachProp","getFluidValue","hasFluidValue","TreeContext","dependencies","AnimatedObject","source","animated","values","key","_makePayload","Set","_addToPayload","Array","from","add","AnimatedArray","map","length","i","some","Boolean","makeAnimated","nodeType","getAnimatedType","parentNode","arr","React","forwardRef","useRef","useCallback","useEffect","raf","useForceUpdate","useOnce","addFluidObserver","removeFluidObserver","useIsomorphicLayoutEffect","withAnimated","Component","host","hasInstance","fun","prototype","isReactComponent","givenProps","givenRef","instanceRef","ref","current","updateRef","props","deps","getAnimatedState","forceUpdate","callback","instance","didUpdate","applyAnimatedValues","observer","PropsObserver","observerRef","dep","cancel","update","usedProps","getComponentProps","eventObserved","event","type","write","style","createAnimatedStyle","cacheKey","createHost","components","hostConfig","displayName","getDisplayName","arg","name"],"sources":["C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\Animated.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\AnimatedValue.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\AnimatedString.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\AnimatedArray.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\AnimatedObject.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\context.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\getAnimatedType.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\createHost.ts","C:\\Users\\ABCD\\Desktop\\task-management-app-master\\frontend\\node_modules\\@react-spring\\animated\\src\\withAnimated.tsx"],"sourcesContent":["import { defineHidden } from '@react-spring/shared'\nimport { AnimatedValue } from './AnimatedValue'\n\nconst $node: any = Symbol.for('Animated:node')\n\nexport const isAnimated = <T = any>(value: any): value is Animated<T> =>\n  !!value && value[$node] === value\n\n/** Get the owner's `Animated` node. */\nexport const getAnimated = <T = any>(owner: any): Animated<T> | undefined =>\n  owner && owner[$node]\n\n/** Set the owner's `Animated` node. */\nexport const setAnimated = (owner: any, node: Animated) =>\n  defineHidden(owner, $node, node)\n\n/** Get every `AnimatedValue` in the owner's `Animated` node. */\nexport const getPayload = (owner: any): AnimatedValue[] | undefined =>\n  owner && owner[$node] && owner[$node].getPayload()\n\nexport abstract class Animated<T = any> {\n  /** The cache of animated values */\n  protected payload?: Payload\n\n  constructor() {\n    // This makes \"isAnimated\" return true.\n    setAnimated(this, this)\n  }\n\n  /** Get the current value. Pass `true` for only animated values. */\n  abstract getValue(animated?: boolean): T\n\n  /** Set the current value. Returns `true` if the value changed. */\n  abstract setValue(value: T): boolean | void\n\n  /** Reset any animation state. */\n  abstract reset(goal?: T): void\n\n  /** Get every `AnimatedValue` used by this node. */\n  getPayload(): Payload {\n    return this.payload || []\n  }\n}\n\nexport type Payload = readonly AnimatedValue[]\n","import { is } from '@react-spring/shared'\nimport { Animated, Payload } from './Animated'\n\n/** An animated number or a native attribute value */\nexport class AnimatedValue<T = any> extends Animated {\n  done = true\n  elapsedTime!: number\n  lastPosition!: number\n  lastVelocity?: number | null\n  v0?: number | null\n  durationProgress = 0\n\n  constructor(protected _value: T) {\n    super()\n    if (is.num(this._value)) {\n      this.lastPosition = this._value\n    }\n  }\n\n  /** @internal */\n  static create(value: any) {\n    return new AnimatedValue(value)\n  }\n\n  getPayload(): Payload {\n    return [this]\n  }\n\n  getValue() {\n    return this._value\n  }\n\n  setValue(value: T, step?: number) {\n    if (is.num(value)) {\n      this.lastPosition = value\n      if (step) {\n        value = (Math.round(value / step) * step) as any\n        if (this.done) {\n          this.lastPosition = value as any\n        }\n      }\n    }\n    if (this._value === value) {\n      return false\n    }\n    this._value = value\n    return true\n  }\n\n  reset() {\n    const { done } = this\n    this.done = false\n    if (is.num(this._value)) {\n      this.elapsedTime = 0\n      this.durationProgress = 0\n      this.lastPosition = this._value\n      if (done) this.lastVelocity = null\n      this.v0 = null\n    }\n  }\n}\n","import { AnimatedValue } from './AnimatedValue'\nimport { is, createInterpolator } from '@react-spring/shared'\n\ntype Value = string | number\n\nexport class AnimatedString extends AnimatedValue<Value> {\n  protected declare _value: number\n  protected _string: string | null = null\n  protected _toString: (input: number) => string\n\n  constructor(value: string) {\n    super(0)\n    this._toString = createInterpolator({\n      output: [value, value],\n    })\n  }\n\n  /** @internal */\n  static create(value: string) {\n    return new AnimatedString(value)\n  }\n\n  getValue() {\n    const value = this._string\n    return value == null ? (this._string = this._toString(this._value)) : value\n  }\n\n  setValue(value: Value) {\n    if (is.str(value)) {\n      if (value == this._string) {\n        return false\n      }\n      this._string = value\n      this._value = 1\n    } else if (super.setValue(value)) {\n      this._string = null\n    } else {\n      return false\n    }\n    return true\n  }\n\n  reset(goal?: string) {\n    if (goal) {\n      this._toString = createInterpolator({\n        output: [this.getValue(), goal],\n      })\n    }\n    this._value = 0\n    super.reset()\n  }\n}\n","import { isAnimatedString } from '@react-spring/shared'\nimport { AnimatedObject } from './AnimatedObject'\nimport { AnimatedString } from './AnimatedString'\nimport { AnimatedValue } from './AnimatedValue'\n\ntype Value = number | string\ntype Source = AnimatedValue<Value>[]\n\n/** An array of animated nodes */\nexport class AnimatedArray<\n  T extends ReadonlyArray<Value> = Value[]\n> extends AnimatedObject {\n  protected declare source: Source\n  constructor(source: T) {\n    super(source)\n  }\n\n  /** @internal */\n  static create<T extends ReadonlyArray<Value>>(source: T) {\n    return new AnimatedArray(source)\n  }\n\n  getValue(): T {\n    return this.source.map(node => node.getValue()) as any\n  }\n\n  setValue(source: T) {\n    const payload = this.getPayload()\n    // Reuse the payload when lengths are equal.\n    if (source.length == payload.length) {\n      return payload.map((node, i) => node.setValue(source[i])).some(Boolean)\n    }\n    // Remake the payload when length changes.\n    super.setValue(source.map(makeAnimated))\n    return true\n  }\n}\n\nfunction makeAnimated(value: any) {\n  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue\n  return nodeType.create(value)\n}\n","import { Lookup } from '@react-spring/types'\nimport {\n  each,\n  eachProp,\n  getFluidValue,\n  hasFluidValue,\n} from '@react-spring/shared'\nimport { Animated, isAnimated, getPayload } from './Animated'\nimport { AnimatedValue } from './AnimatedValue'\nimport { TreeContext } from './context'\n\n/** An object containing `Animated` nodes */\nexport class AnimatedObject extends Animated {\n  constructor(protected source: Lookup) {\n    super()\n    this.setValue(source)\n  }\n\n  getValue(animated?: boolean) {\n    const values: Lookup = {}\n    eachProp(this.source, (source, key) => {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated)\n      } else if (hasFluidValue(source)) {\n        values[key] = getFluidValue(source)\n      } else if (!animated) {\n        values[key] = source\n      }\n    })\n    return values\n  }\n\n  /** Replace the raw object data */\n  setValue(source: Lookup) {\n    this.source = source\n    this.payload = this._makePayload(source)\n  }\n\n  reset() {\n    if (this.payload) {\n      each(this.payload, node => node.reset())\n    }\n  }\n\n  /** Create a payload set. */\n  protected _makePayload(source: Lookup) {\n    if (source) {\n      const payload = new Set<AnimatedValue>()\n      eachProp(source, this._addToPayload, payload)\n      return Array.from(payload)\n    }\n  }\n\n  /** Add to a payload set. */\n  protected _addToPayload(this: Set<AnimatedValue>, source: any) {\n    if (TreeContext.dependencies && hasFluidValue(source)) {\n      TreeContext.dependencies.add(source)\n    }\n    const payload = getPayload(source)\n    if (payload) {\n      each(payload, node => this.add(node))\n    }\n  }\n}\n","import { FluidValue } from '@react-spring/shared'\n\nexport type TreeContext = {\n  /**\n   * Any animated values found when updating the payload of an `AnimatedObject`\n   * are also added to this `Set` to be observed by an animated component.\n   */\n  dependencies: Set<FluidValue> | null\n}\n\nexport const TreeContext: TreeContext = { dependencies: null }\n","import { is, isAnimatedString } from '@react-spring/shared'\nimport { AnimatedType } from './types'\nimport { AnimatedArray } from './AnimatedArray'\nimport { AnimatedString } from './AnimatedString'\nimport { AnimatedValue } from './AnimatedValue'\nimport { getAnimated } from './Animated'\n\n/** Return the `Animated` node constructor for a given value */\nexport function getAnimatedType(value: any): AnimatedType {\n  const parentNode = getAnimated(value)\n  return parentNode\n    ? (parentNode.constructor as any)\n    : is.arr(value)\n    ? AnimatedArray\n    : isAnimatedString(value)\n    ? AnimatedString\n    : AnimatedValue\n}\n","import { Lookup } from '@react-spring/types'\nimport { is, eachProp } from '@react-spring/shared'\nimport { AnimatableComponent, withAnimated } from './withAnimated'\nimport { Animated } from './Animated'\nimport { AnimatedObject } from './AnimatedObject'\n\nexport interface HostConfig {\n  /** Provide custom logic for native updates */\n  applyAnimatedValues: (node: any, props: Lookup) => boolean | void\n  /** Wrap the `style` prop with an animated node */\n  createAnimatedStyle: (style: Lookup) => Animated\n  /** Intercept props before they're passed to an animated component */\n  getComponentProps: (props: Lookup) => typeof props\n}\n\n// A stub type that gets replaced by @react-spring/web and others.\ntype WithAnimated = {\n  (Component: AnimatableComponent): any\n  [key: string]: any\n}\n\n// For storing the animated version on the original component\nconst cacheKey = Symbol.for('AnimatedComponent')\n\nexport const createHost = (\n  components: AnimatableComponent[] | { [key: string]: AnimatableComponent },\n  {\n    applyAnimatedValues = () => false,\n    createAnimatedStyle = style => new AnimatedObject(style),\n    getComponentProps = props => props,\n  }: Partial<HostConfig> = {}\n) => {\n  const hostConfig: HostConfig = {\n    applyAnimatedValues,\n    createAnimatedStyle,\n    getComponentProps,\n  }\n\n  const animated: WithAnimated = (Component: any) => {\n    const displayName = getDisplayName(Component) || 'Anonymous'\n\n    if (is.str(Component)) {\n      Component =\n        animated[Component] ||\n        (animated[Component] = withAnimated(Component, hostConfig))\n    } else {\n      Component =\n        Component[cacheKey] ||\n        (Component[cacheKey] = withAnimated(Component, hostConfig))\n    }\n\n    Component.displayName = `Animated(${displayName})`\n    return Component\n  }\n\n  eachProp(components, (Component, key) => {\n    if (is.arr(components)) {\n      key = getDisplayName(Component)!\n    }\n    animated[key] = animated(Component)\n  })\n\n  return {\n    animated,\n  }\n}\n\nconst getDisplayName = (arg: AnimatableComponent) =>\n  is.str(arg)\n    ? arg\n    : arg && is.str(arg.displayName)\n    ? arg.displayName\n    : (is.fun(arg) && arg.name) || null\n","import * as React from 'react'\nimport { forwardRef, useRef, Ref, useCallback, useEffect } from 'react'\nimport {\n  is,\n  each,\n  raf,\n  useForceUpdate,\n  useOnce,\n  FluidEvent,\n  FluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n  useIsomorphicLayoutEffect,\n} from '@react-spring/shared'\nimport { ElementType } from '@react-spring/types'\n\nimport { AnimatedObject } from './AnimatedObject'\nimport { TreeContext } from './context'\nimport { HostConfig } from './createHost'\n\nexport type AnimatableComponent = string | Exclude<ElementType, string>\n\nexport const withAnimated = (Component: any, host: HostConfig) => {\n  const hasInstance: boolean =\n    // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !is.fun(Component) ||\n    (Component.prototype && Component.prototype.isReactComponent)\n\n  return forwardRef((givenProps: any, givenRef: Ref<any>) => {\n    const instanceRef = useRef<any>(null)\n\n    // The `hasInstance` value is constant, so we can safely avoid\n    // the `useCallback` invocation when `hasInstance` is false.\n    const ref =\n      hasInstance &&\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCallback(\n        (value: any) => {\n          instanceRef.current = updateRef(givenRef, value)\n        },\n        [givenRef]\n      )\n\n    const [props, deps] = getAnimatedState(givenProps, host)\n\n    const forceUpdate = useForceUpdate()\n\n    const callback = () => {\n      const instance = instanceRef.current\n      if (hasInstance && !instance) {\n        // Either this component was unmounted before changes could be\n        // applied, or the wrapped component forgot to forward its ref.\n        return\n      }\n\n      const didUpdate = instance\n        ? host.applyAnimatedValues(instance, props.getValue(true))\n        : false\n\n      // Re-render the component when native updates fail.\n      if (didUpdate === false) {\n        forceUpdate()\n      }\n    }\n\n    const observer = new PropsObserver(callback, deps)\n\n    const observerRef = useRef<PropsObserver>()\n    useIsomorphicLayoutEffect(() => {\n      observerRef.current = observer\n\n      // Observe the latest dependencies.\n      each(deps, dep => addFluidObserver(dep, observer))\n\n      return () => {\n        // Stop observing previous dependencies.\n        if (observerRef.current) {\n          each(observerRef.current.deps, dep =>\n            removeFluidObserver(dep, observerRef.current!)\n          )\n          raf.cancel(observerRef.current.update)\n        }\n      }\n    })\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(callback, [])\n    // Stop observing on unmount.\n    useOnce(() => () => {\n      const observer = observerRef.current!\n      each(observer.deps, dep => removeFluidObserver(dep, observer))\n    })\n\n    const usedProps = host.getComponentProps(props.getValue())\n    return <Component {...usedProps} ref={ref} />\n  })\n}\n\nclass PropsObserver {\n  constructor(readonly update: () => void, readonly deps: Set<FluidValue>) {}\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      raf.write(this.update)\n    }\n  }\n}\n\ntype AnimatedState = [props: AnimatedObject, dependencies: Set<FluidValue>]\n\nfunction getAnimatedState(props: any, host: HostConfig): AnimatedState {\n  const dependencies = new Set<FluidValue>()\n  TreeContext.dependencies = dependencies\n\n  // Search the style for dependencies.\n  if (props.style)\n    props = {\n      ...props,\n      style: host.createAnimatedStyle(props.style),\n    }\n\n  // Search the props for dependencies.\n  props = new AnimatedObject(props)\n\n  TreeContext.dependencies = null\n  return [props, dependencies]\n}\n\nfunction updateRef<T>(ref: Ref<T>, value: T) {\n  if (ref) {\n    if (is.fun(ref)) ref(value)\n    else (ref as any).current = value\n  }\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}